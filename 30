<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acronym Guesser</title>
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font for better aesthetics */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="bg-white p-8 rounded-xl shadow-lg w-full max-w-md">
        <!-- Acronym Input Field -->
        <div class="mb-4">
            <label for="acronymInput" class="block text-gray-700 text-sm font-semibold mb-2">Acronym:</label>
            <input type="text" id="acronymInput" class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out" placeholder="e.g., TB">
        </div>

        <!-- Guess Input Field -->
        <div class="mb-6">
            <label for="guessInput" class="block text-gray-700 text-sm font-semibold mb-2">Guess <span class="text-gray-500">(What does it stand for?)</span>:</label>
            <input type="text" id="guessInput" class="shadow-sm appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out" placeholder="e.g., toured brazil">
        </div>

        <!-- Guess Button -->
        <button id="guessButton" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-75 transition duration-300 ease-in-out transform hover:scale-105 shadow-md">
            Guess
        </button>

        <!-- Feedback and Timer Messages -->
        <div id="messageBox" class="mt-6 p-4 rounded-lg text-center text-lg font-medium hidden">
            <!-- Messages will be displayed here -->
        </div>

        <!-- Instructions -->
        <div class="mt-8 pt-4 border-t border-gray-200 text-sm text-gray-600">
            <p class="mb-2">
                If less than 80% of all cards in the room are deciphered, <strong>everyone sings karaoke</strong>.
            </p>
            <p>
                If at least 80% are deciphered, <strong>only those with undeciphered cards sing</strong>.
            </p>
        </div>
    </div>

    <script>
        const GUESS_COOLDOWN_SECONDS = 60;
        // Define the acronyms and their meanings, now supporting multiple correct guesses
        // The meanings are base64 encoded to prevent easy inspection.
        const acronyms = {
            "ffw": ['ZmxpZXMgZm9yIHdvcms=', 'Zmxvd24gZm9yIHdvcms=', 'ZmxldyBmb3Igd29yaw==', 'Zmx5IGZvciB3b3Jr'],
            "wty": ['d2VkZGluZyB0aGlzIHllYXI=', 'd2VkIHRoaXMgeWVhcg==', 'd2VkZGVkIHRoaXMgeWVhcg=='],
            "lit": ['bGl2ZWQgaW4gdG9yb250bw==', 'bGl2ZXMgaW4gdG9yb250bw==', 'bGl2aW5nIGluIHRvcm9udG8='],
            "lib": ['bGl2ZXMgaW4gYnJhbXB0b24=', 'bGl2ZWQgaW4gYnJhbXB0b24=', 'bGl2aW5nIGluIGJyYW1wdG9u'],
            "f": ['Zm9vZGll', 'Zm9vZGllcw=='],
            "btf": ['YmVlbiB0byBmcmFuY2U='],
            "auw": ['YXR0ZW5kZWQgdW5pdmVyc2l0eSBvZiB3YXRlcmxvbw==', 'YXR0ZW5kIHVuaXZlcnNpdHkgb2Ygd2F0ZXJsb28='],
            "bhty": ['Ym91Z2h0IGEgaG91c2UgdGhpcyB5ZWFy', 'Ym91Z2h0IGhvdXNlIHRoaXMgeWVhcg==', 'YnV5IGhvdXNlIHRoaXMgeWVhcg==', 'YnV5IGEgaG91c2UgdGhpcyB5ZWFy', 'YnV5aW5nIGhvdXNlIHRoaXMgeWVhcg=='],
            "wb": ['d2F0Y2hlcyBiYXNlYmFsbA=='],
            "p": ['cGhvdG9ncmFwaGVy', 'cGhvdG9ncmFwaHk='],
            "loc": ['bGl2ZWQgb3V0c2lkZSBjYW5hZGE=', 'aGFzIGxpdmVkIG91dHNpZGUgY2FuYWRh'],
            "btk": ['YmVlbiB0byBrb3JlYQ=='],
            "gp": ['Z3Jvd3MgcGxhbnRz', 'Z3Jvd2luZyBwbGFudHM='],
            "bte": ['YmVlbiB0byBlbmdsYW5k'],
            "d": ['ZGFuY2Vz', 'ZGFuY2Vy'],
            "wa": ['d2F0Y2hlcyBhbmltZQ==', 'd2F0Y2hpbmcgYW5pbWU=', 'd2F0Y2ggYW5pbWU='],
            "wgr": ['d3JpdHRlbiBnb29nbGUgcmV2aWV3cw==', 'd3JpdGVzIGdvb2dsZSByZXZpZXdz', 'd3JvdGUgZ29vZ2xlIHJldmlld3M='],
            "wgs": ['d2VhcnMgZ3ltIHNoYXJr', 'd2VhciBneW0gc2hhcms=', 'd29ybiBneW0gc2hhcms=', 'd2VhcnMgZ3ltc2hhcms='],
            "waom": ['d2l0aCBhbiBvbGRlciBtYW4=', 'd2l0aCBvbGRlciBtYW4='],
            "btv": ['YmVlbiB0byB2ZWxk'],
            "btj": ['YmVlbiB0byBqYXBhbg=='],
            "vi": ['dmlzaXRlZCBpdGFseQ==', 'dmlzaXQgaXRhbHk='],
            "wopp": ['d29ya3Mgb24gcG9wdWxhciBwcm9kdWN0', 'd29ya2luZyBvbiBwb3B1bGFyIHByb2R1Y3Q=', 'd29ya2VkIG9uIHBvcHVsYXIgcHJvZHVjdA=='],
            "ab": ['YXVndXN0IGJhYnk='],
            "db": ['ZGVjZW1iZXIgYmFieQ=='],
            "bw": ['Ym9va3dvcm0=', 'Ym9va3dvcm0='],
            "vcr": ['dmlzaXRlZCBjemVjaCByZXB1YmxpYw==', 'dmlzaXRlZCBjemVjaGlh'],
        };

        // Get references to DOM elements
        const acronymInput = document.getElementById('acronymInput');
        const guessInput = document.getElementById('guessInput');
        const guessButton = document.getElementById('guessButton');
        const messageBox = document.getElementById('messageBox');

        // Storage keys
        const COOLDOWN_STORAGE_KEY = 'acronymGuesserCooldownEnd';
        const LAST_MESSAGE_STORAGE_KEY = 'acronymGuesserLastMessage'; // To persist the result message

        let cooldownTimer = null; // To store the setInterval ID

        /**
         * Stores the last message and type in localStorage.
         * @param {string} message - The message to display.
         * @param {string} type - The type of message ('success', 'error').
         */
        function storeLastMessage(message, type) {
            localStorage.setItem(LAST_MESSAGE_STORAGE_KEY, JSON.stringify({ message, type }));
        }

        /**
         * Retrieves the last message and type from localStorage.
         * @returns {{message: string, type: string}|null}
         */
        function retrieveLastMessage() {
            const stored = localStorage.getItem(LAST_MESSAGE_STORAGE_KEY);
            return stored ? JSON.parse(stored) : null;
        }

        /**
         * Displays a message in the message box.
         * @param {string} message - The message to display.
         * @param {string} type - The type of message ('success', 'error', 'info').
         */
        function showMessage(message, type) {
            messageBox.innerHTML = message;
            messageBox.classList.remove('hidden', 'bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800', 'bg-blue-100', 'text-blue-800');

            if (type === 'success') {
                messageBox.classList.add('bg-green-100', 'text-green-800');
            } else if (type === 'error') {
                messageBox.classList.add('bg-red-100', 'text-red-800');
            } else if (type === 'info') {
                messageBox.classList.add('bg-blue-100', 'text-blue-800');
            }
            messageBox.style.display = 'block';
        }

        /**
         * Hides the message box and clears last message from storage.
         */
        function hideMessageAndClearStorage() {
            messageBox.classList.add('hidden');
            messageBox.style.display = 'none';
            localStorage.removeItem(LAST_MESSAGE_STORAGE_KEY);
        }

        /**
         * Applies the cooldown state based on localStorage.
         * This function is called on page load, after a guess, and on storage events.
         */
        function applyCooldownState() {
            const storedCooldownEnd = localStorage.getItem(COOLDOWN_STORAGE_KEY);
            const currentTime = Date.now();

            // Clear any existing timer to prevent duplicates
            if (cooldownTimer) {
                clearInterval(cooldownTimer);
            }

            if (storedCooldownEnd && parseInt(storedCooldownEnd, 10) > currentTime) {
                // Cooldown is active
                const cooldownEndTime = parseInt(storedCooldownEnd, 10);
                let remainingTime = Math.ceil((cooldownEndTime - currentTime) / 1000);

                guessButton.disabled = true;
                guessButton.style.display = 'none'; // Hide the button during cooldown

                const lastMessage = retrieveLastMessage();
                // Use the stored message if available, otherwise a generic "Please wait."
                const baseMessage = lastMessage ? lastMessage.message : "Please wait.";
                const messageType = lastMessage ? lastMessage.type : 'info'; // Default to info if no last message type

                showMessage(`${baseMessage}<br>Please wait ${remainingTime} seconds before guessing again.`, messageType);

                cooldownTimer = setInterval(() => {
                    remainingTime--;
                    if (remainingTime > 0) {
                        showMessage(`${baseMessage}<br>Please wait ${remainingTime} seconds before guessing again.`, messageType);
                    } else {
                        // Cooldown finished
                        clearInterval(cooldownTimer);
                        localStorage.removeItem(COOLDOWN_STORAGE_KEY); // Remove cooldown timestamp
                        guessButton.disabled = false; // Re-enable button
                        guessButton.textContent = "Guess"; // Reset button text
                        guessButton.style.display = 'block'; // Show button again
                        hideMessageAndClearStorage(); // Hide cooldown message and clear stored result
                    }
                }, 1000); // Update every second
            } else {
                // Cooldown is not active or has expired
                localStorage.removeItem(COOLDOWN_STORAGE_KEY); // Clean up expired key if it exists
                guessButton.disabled = false; // Ensure button is enabled
                guessButton.textContent = "Guess"; // Reset button text
                guessButton.style.display = 'block'; // Ensure button is visible
                hideMessageAndClearStorage(); // Hide any lingering message and clear stored result
            }
        }

        /**
         * Handles the guess button click event.
         */
        guessButton.addEventListener('click', () => {
            const storedCooldownEnd = localStorage.getItem(COOLDOWN_STORAGE_KEY);
            // Check if cooldown is active from localStorage before processing a new guess
            if (storedCooldownEnd && parseInt(storedCooldownEnd, 10) > Date.now()) {
                applyCooldownState(); // Re-apply state to ensure current tab reflects cooldown
                return; // Prevent new guess if cooldown is active
            }

            const acronym = acronymInput.value.trim().toLowerCase();
            const guess = guessInput.value.trim().toLowerCase();

            if (!acronym || !guess) {
                showMessage("Please enter both an acronym and your guess.", 'error');
                return;
            }

            // Disable button and show processing message during the fake delay
            guessButton.disabled = true;
            guessButton.textContent = "Processing...";
            showMessage("Processing your guess...", 'info');

            // Simulate a 3-second delay for processing the guess
            setTimeout(() => {
                let isCorrect = false;
                let firstMatchDecoded = '';

                // Check if the acronym exists and if the guess is one of the accepted meanings
                if (acronyms[acronym]) {
                    // Decode each stored meaning for comparison
                    const decodedMeanings = acronyms[acronym].map(encodedMeaning => atob(encodedMeaning));
                    const foundMatch = decodedMeanings.find(meaning => meaning === guess);

                    if (foundMatch) {
                        isCorrect = true;
                        firstMatchDecoded = atob(acronyms[acronym][0]); // Get the first official meaning (decoded)
                    }
                }

                let messageToStore = "";
                let messageTypeToStore = "";

                if (isCorrect) {
                    const formattedAcronym = acronym.toUpperCase();
                    const formattedMeaning = firstMatchDecoded.toUpperCase();
                    messageToStore = `Correct!<br>${formattedAcronym} stands for "${formattedMeaning}".<br>Bring your card to Nim or Nic.`;
                    messageTypeToStore = 'success';
                } else {
                    messageToStore = "Incorrect.";
                    messageTypeToStore = 'error';
                }

                // Store the result message and its type in localStorage before starting cooldown
                storeLastMessage(messageToStore, messageTypeToStore);

                // Calculate and set cooldown end time in localStorage
                const cooldownEndTime = Date.now() + (GUESS_COOLDOWN_SECONDS * 1000);
                localStorage.setItem(COOLDOWN_STORAGE_KEY, cooldownEndTime.toString());

                // Apply the cooldown state, which will also display the message and start the timer
                applyCooldownState();

            }, 3000); // 3-second fake delay
        });

        // Initialize on page load: check for active cooldown and apply state
        window.addEventListener('load', () => {
            applyCooldownState();
        });

        // Listen for storage changes from other tabs/windows
        window.addEventListener('storage', (event) => {
            // If the cooldown key or last message key changes, re-evaluate the cooldown state
            if (event.key === COOLDOWN_STORAGE_KEY || event.key === LAST_MESSAGE_STORAGE_KEY) {
                applyCooldownState();
            }
        });
    </script>
</body>
</html>
